{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajbi\\\\OneDrive\\\\Desktop\\\\iteration 4\\\\src\\\\TaskContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { collection, addDoc, onSnapshot, updateDoc, doc, deleteDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport const useTaskContext = () => {\n  _s();\n  return useContext(TaskContext);\n};\n_s(useTaskContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const TaskProvider = ({\n  children\n}) => {\n  _s2();\n  const [lists, setLists] = useState([]);\n  const [selectedList, setSelectedList] = useState(null);\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(db, \"lists\"), snapshot => {\n      setLists(snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })));\n    });\n    return () => unsubscribe();\n  }, []);\n  const addList = async name => {\n    await addDoc(collection(db, \"lists\"), {\n      name,\n      tasks: []\n    });\n  };\n  const deleteList = async id => {\n    await deleteDoc(doc(db, \"lists\", id));\n  };\n  const addTask = async (listId, task) => {\n    const listRef = doc(db, \"lists\", listId);\n    const updatedTasks = [...selectedList.tasks, task];\n    await updateDoc(listRef, {\n      tasks: updatedTasks\n    });\n    setSelectedList(prev => ({\n      ...prev,\n      tasks: updatedTasks\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      lists,\n      selectedList,\n      setSelectedList,\n      addList,\n      deleteList,\n      addTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s2(TaskProvider, \"p7YHKdnxIKHypZG1TmUYm8fcWW4=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","collection","addDoc","onSnapshot","updateDoc","doc","deleteDoc","db","jsxDEV","_jsxDEV","TaskContext","useTaskContext","_s","TaskProvider","children","_s2","lists","setLists","selectedList","setSelectedList","unsubscribe","snapshot","docs","map","id","data","addList","name","tasks","deleteList","addTask","listId","task","listRef","updatedTasks","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rajbi/OneDrive/Desktop/iteration 4/src/TaskContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  onSnapshot,\r\n  updateDoc,\r\n  doc,\r\n  deleteDoc,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"./firebaseConfig\";\r\n\r\nconst TaskContext = createContext();\r\n\r\nexport const useTaskContext = () => useContext(TaskContext);\r\n\r\nexport const TaskProvider = ({ children }) => {\r\n  const [lists, setLists] = useState([]);\r\n  const [selectedList, setSelectedList] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onSnapshot(collection(db, \"lists\"), (snapshot) => {\r\n      setLists(\r\n        snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))\r\n      );\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const addList = async (name) => {\r\n    await addDoc(collection(db, \"lists\"), { name, tasks: [] });\r\n  };\r\n\r\n  const deleteList = async (id) => {\r\n    await deleteDoc(doc(db, \"lists\", id));\r\n  };\r\n\r\n  const addTask = async (listId, task) => {\r\n    const listRef = doc(db, \"lists\", listId);\r\n    const updatedTasks = [...selectedList.tasks, task];\r\n    await updateDoc(listRef, { tasks: updatedTasks });\r\n    setSelectedList((prev) => ({ ...prev, tasks: updatedTasks }));\r\n  };\r\n\r\n  return (\r\n    <TaskContext.Provider\r\n      value={{ lists, selectedList, setSelectedList, addList, deleteList, addTask }}\r\n    >\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SACEC,UAAU,EACVC,MAAM,EACNC,UAAU,EACVC,SAAS,EACTC,GAAG,EACHC,SAAS,QACJ,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,WAAW,gBAAGb,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMc,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMd,UAAU,CAACY,WAAW,CAAC;AAAA;AAACE,EAAA,CAA/CD,cAAc;AAE3B,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMoB,WAAW,GAAGjB,UAAU,CAACF,UAAU,CAACM,EAAE,EAAE,OAAO,CAAC,EAAGc,QAAQ,IAAK;MACpEJ,QAAQ,CACNI,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAElB,GAAG,KAAM;QAAEmB,EAAE,EAAEnB,GAAG,CAACmB,EAAE;QAAE,GAAGnB,GAAG,CAACoB,IAAI,CAAC;MAAE,CAAC,CAAC,CAC5D,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,MAAML,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,OAAO,GAAG,MAAOC,IAAI,IAAK;IAC9B,MAAMzB,MAAM,CAACD,UAAU,CAACM,EAAE,EAAE,OAAO,CAAC,EAAE;MAAEoB,IAAI;MAAEC,KAAK,EAAE;IAAG,CAAC,CAAC;EAC5D,CAAC;EAED,MAAMC,UAAU,GAAG,MAAOL,EAAE,IAAK;IAC/B,MAAMlB,SAAS,CAACD,GAAG,CAACE,EAAE,EAAE,OAAO,EAAEiB,EAAE,CAAC,CAAC;EACvC,CAAC;EAED,MAAMM,OAAO,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,KAAK;IACtC,MAAMC,OAAO,GAAG5B,GAAG,CAACE,EAAE,EAAE,OAAO,EAAEwB,MAAM,CAAC;IACxC,MAAMG,YAAY,GAAG,CAAC,GAAGhB,YAAY,CAACU,KAAK,EAAEI,IAAI,CAAC;IAClD,MAAM5B,SAAS,CAAC6B,OAAO,EAAE;MAAEL,KAAK,EAAEM;IAAa,CAAC,CAAC;IACjDf,eAAe,CAAEgB,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEP,KAAK,EAAEM;IAAa,CAAC,CAAC,CAAC;EAC/D,CAAC;EAED,oBACEzB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IACnBC,KAAK,EAAE;MAAErB,KAAK;MAAEE,YAAY;MAAEC,eAAe;MAAEO,OAAO;MAAEG,UAAU;MAAEC;IAAQ,CAAE;IAAAhB,QAAA,EAE7EA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,GAAA,CApCWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}